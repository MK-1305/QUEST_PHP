オブジェクト指向入門講座

モノや概念(設計図) = class
「ポケモンという概念」
classの中で定義された関数 = method
classを元にしたデータの塊 = instance(object)
「ピカチュウやヒトカゲがインスタンス」

*ポケモンについてはpokemon classに任せて、ゲームの進行などはgame classに任せて管理をしやすくする

「継承」
親クラスの変数やメソッドを子クラスが受け継ぐ
（ポケモンクラスが親、ピカチュウクラスやヒトカゲクラスが子）

「ポリモーフィズム」（多態性）
同じ処理（メソッド）を呼び出してもインスタンスによって違う振る舞いをする
（ピカチュウインスタンスなら10万ボルト、ヒトカゲインスタンスならひのこが出力される）
親クラスで決めたメソッドを子クラスでオーバーライドして呼び出し側は同じでも違う振る舞いをしてくれる

「カプセル化」
変数やメソッド（関数）を隠蔽化して、外部からのアクセスを必要最低限にすることでシステムが安全になる


「public」どこからでもアクセス可能。クラスの外部から直接アクセスしたり、継承したクラスからアクセスしたりすることができます。
publicは最も制限の少ないアクセスレベルであり、デフォルトのアクセスレベルです。

「protected」そのクラス自身と継承したクラス（サブクラス）からアクセスすることができますが、クラスの外部からはアクセスできません。
protectedは、クラスが継承されることを前提としている場合に、サブクラス内でのみ使用を許可したいメンバに使用されます。

「private」そのクラスが定義された内部からのみアクセス可能。継承したクラスからもアクセスすることはできません。
privateは、クラスの外部からのアクセスを完全に制限し、クラスの実装の詳細を隠蔽（カプセル化）する場合に使用されます。

「設計のポイント」
単一責任の原則：１つのクラスは１つの役割を負うべき（仕様が変わっても）
クラスもメソッドも小さくする（単一責任の原則になっていく）
メソッドは20行、クラスは100行以内を目指して書く

演習問題
素早さのパラメーターを追加して素早さが高いポケモンが先にこうげきするようにする。